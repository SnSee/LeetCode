
// LeetCode上耗时短的别人的代码
int cmp(const void *a, const void *b){
    return *(int *)a - *(int *)b;
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes){
    qsort(nums, numsSize, sizeof(int), cmp);
    int count[INT_MAX] = {0};
    int foo;
    int max  = 0;
    int **result = (int **)malloc(sizeof(int *) * 1000);
    int *columnSizes = (int *)malloc(sizeof(int) * 1000);
    *returnSize = 1;

    for(int i = 0; i < numsSize; i++){
        // nums[i] = nums[i] * 4 - target;
        // if(nums[i] > max) max = nums[i];
        // count[nums[i]]++;
        printf("%d ", nums[i]);
        foo = nums[i] > foo ? nums[i]: foo;
    }

    int previ = foo + 1;
    for(int i = 0; i < numsSize - 3; i++){
        if(nums[i] == previ){
            continue;
        }
        if(nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target){
            break;
        }
        if(nums[i] + nums[numsSize - 1] + nums[numsSize - 2] + nums[numsSize - 3] < target){
            continue;
        }
        previ = nums[i];
        int prevj =  foo + 1;
        for(int j = i + 1; j < numsSize - 2; j++){            
            if(nums[j] == prevj){
                continue;
            }
            if(nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target){
                break;
            }
            if(nums[i] + nums[numsSize - 1] + nums[numsSize - 2] + nums[numsSize - 3] < target){
                continue;
            }
            prevj = nums[j];
            int l = j + 1;
            int r = numsSize - 1;
            while (l < r)
            {
                // printf("hello %d\n", *returnSize);
                int a = nums[l];
                int b = nums[r];
                int sum = nums[i] + nums[j] + nums[l] + nums[r];
                if(target > sum)
                    while(l <= r && nums[l] == a) 
                        l++;
                else if(target < sum)
                    while(l <= r && nums[r] == b) 
                        r--;
                else if(target == sum){
                    // printf("**hello %d\n", columnSizes[0]);
                    columnSizes[*returnSize - 1] = 4;
                    // printf("**hello %d\n", *returnSize);
                    result[*returnSize - 1] = (int *)malloc(sizeof(int) * (columnSizes[*returnSize - 1]));
                    // printf("**hello %d\n", *returnSize);
                    result[*returnSize - 1][0] =nums[i];
                    result[*returnSize - 1][1] =nums[j];
                    result[*returnSize - 1][2] =nums[l];
                    result[*returnSize - 1][3] =nums[r];
                    *returnSize += 1;
                    // printf("returnsize = %d\n", columnSizes[*returnSize - 1]);
                    while(l <= r && nums[l] == a ){ 
                        // if(nums[l] == 16 && nums[r] == 36) printf("11\n");
                        l++;
                    }
                }
            }                                
        }
    }
    *returnSize -= 1;
    *returnColumnSizes = columnSizes;
    return result;
}